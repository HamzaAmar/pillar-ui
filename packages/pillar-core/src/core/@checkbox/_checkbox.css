.ch-L {
  font-size: 0.875em;
  /* color: inherit; */
}

.ch-C {
  width: fit-content;
  color: var(--text-8);
  display: flex;
  gap: var(--S3);
  align-items: center;

  /*
    These properties serve as fallbacks. If the corresponding utility functions are
    unavailable, these properties take priority. However, if specific props related to
    avatars are provided, they will override these properties.
  */
  font-size: var(--checkbox-size, 1rem);

  &:has(:disabled) {
    cursor: not-allowed;
  }

  &:hover > .ch- {
    box-shadow: 0 0 0 0.125em var(--c7, var(--P7));
  }
}

.ch-E {
  &:checked:disabled + .ch- {
    color: var(--B5);
  }
  &[aria-checked='false'] + .ch- svg {
    display: none;
  }
  &:checked + .ch-,
  &:indeterminate + .ch- {
    background: var(--c9, none);
    color: var(--c1); /* Responsible For The Color Of The Check Icon stroke  white in checked state */
  }

  &:disabled + .ch- {
    box-shadow: none;
    border-color: var(--B10);
    background: var(--B10);
    color: transparent; /* Responsible For The Color Of The Check Icon stroke  transparent in disabled state */
  }
  &:disabled ~ * {
    color: var(--B10);
  }
}

.ch- {
  --eq-s: 1.25em;
  --fx: inline-flex;

  border: 1px solid var(--O7);
  border-radius: 0.25em;
  color: transparent; /* Responsible For The Color Of The Check Icon stroke Default to transparent */
}

.ch-I {
  stroke: currentColor;
}

@media (forced-colors: active) {
  .ch-:has(:disabled) {
    color: GrayText;

    & .ch- {
      background: GrayText;
      border-color: GrayText;
    }
  }
}
